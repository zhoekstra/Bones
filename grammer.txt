script:		/* Interpreter reads a single statement or function declaration over and over, keeping a consistent state */
	stmt
	funcdecl
	
elseiflist:		/* a series of else if's */
	elseif elseiflist
	*epsilon*
	
elseif:
	"else" "if" "(" expr ")" "{" stmtlist "}"
	
stmtlist:
	stmt stmtlist
	*epsilon*
	
stmt:
	"{" stmtlist "}"
	"if" "(" expr ")" stmt elseiflist "else" stmt
	"if" "(" expr ")" stmt elseiflist
	"for" "(" id "in" expr ")" stmt
	"while" "(" expr ")" stmt                       
	"var" ID "=" expr ";"
	"constvar" ID "=" expr ";"
	"return" expr ";"
	
rollmodlist:
	rollmod "," rollmodlist
	rollmod
	
rollmod:
	explode expr                                                   /* on numbers that  */
	desplode expr
	rollagain expr
	
funcdecl:
	"func" id "(" idlist ")" "{" stmtlist "return" expr ";" "}"    /* declare a function with input */
	"func" id "(" ")" "{" stmtlist "return" expr ";" "}"           /* declare a function without input */
	
callexpr:
	id "(" exprlist ")"
	id "(" ")"
	
exprlist:
	expr "," exprlist
	expr
	
expr:
	"(" expr ")"
	id
	int
	callexpr
	predeffunc
	
	/* Set mathematics */
	expr "union" expr
	expr "complement" expr
	expr "intersect" expr
	
	/* Mathematical operators. Works only with pools of one value */
	expr "+" expr
	expr "-" expr
	expr "*" expr
	expr "/" expr
	expr "%" expr
	
	/* Comparison operators . Works only with pools of one value */
	expr ">" expr
	expr ">=" expr
	expr "<" expr
	expr "<=" expr
	expr "==" expr
	expr "!=" expr
	
	/* Boolean operators */
	expr "&&" expr
	expr "||" expr
	"!" expr
	
	/* Pool Construction operators */
	"[" "]"
	"[" exprlist "]"
	"[" expr "->" expr "]"
	"[" expr ":" expr ":" rollmodlist "]"
	"[" expr ":" expr "]"
	
predeffunc:=
	"gt" "(" expr "," expr ")"	// return an int with the number of values in the first expr that are greater than the int in the second expression.
	"lt" "(" expr "," expr ")"	// return an int with the number of values in the first expr that are less than the int in the second expression.
	"ge" "(" expr "," expr ")"	// return an int with the number of values in the first expr that are greater than or equal to the int in the second expression.
	"le" "(" expr "," expr ")"	// return an int with the number of values in the first expr that are less than or equal to the int in the second expression.
	"eq" "(" expr "," expr ")"	// return an int with the number of values in the first expr that are equal to the int in the second expression.
	"neq" "(" expr "," expr ")"	// return an int with the number of values in the first expr that are not equal to the int in the second expression.
	"highest" "(" expr ")"	// return a int consisting of the highest value in the expr
	"highest" "(" expr "," expr ")"	// return an pool consisting of the N highest values in the passed in pool
	"lowest" "(" expr ")"	// return an pool consisting of the lowest value in the passed in pool
	"lowest" "(" expr "," expr ")"	// return an pool consisting of the N lowest values in the passed in pool
	"pick" "(" expr ")"	//pick and remove one random value from the expr, then return it.
	"pick" "(" expr "," expr ")"	// pick and remove N random values from the expr, then return them.
	"input" "(" ")"	//ask for input from the user, and return their input as a pool.
	"sizeof" "(" expr ")"	// return an int consisting of the size of the pool
	
=== PREDEFINED VARIABLES ===
	constvar d3 = [ 1 -> 3 ];
	constvar d4 = [ 1 -> 4 ];
	constvar d6 = [ 1 -> 6 ];
	constvar d8 = [ 1 -> 8 ];
	constvar d10 = [ 1 -> 10 ];
	constvar d12 = [ 1 -> 12 ];
	
	