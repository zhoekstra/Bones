/* The following code was generated by JFlex 1.4.3 on 12/26/11 2:37 PM */

package parser;

import beaver.Symbol;
import beaver.Scanner;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/26/11 2:37 PM from the specification file
 * <tt>lexer.jlex</tt>
 */
class BonesScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\51"+
    "\1\12\1\0\1\6\1\56\2\0\1\34\1\35\1\5\1\55\1\42"+
    "\1\54\1\0\1\4\1\10\1\65\1\66\1\11\1\62\1\11\1\63"+
    "\1\11\1\64\1\11\1\44\1\43\1\53\1\50\1\52\2\0\32\6"+
    "\1\40\1\0\1\41\1\0\1\6\1\0\1\47\1\6\1\27\1\61"+
    "\1\16\1\33\1\13\1\21\1\22\1\6\1\30\1\15\1\57\1\20"+
    "\1\24\1\26\1\17\1\45\1\23\1\14\1\31\1\46\1\25\1\60"+
    "\1\6\1\32\1\36\1\0\1\37\1\0\41\7\2\0\4\6\4\0"+
    "\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0"+
    "\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0\5\6\11\0"+
    "\1\6\21\0\130\7\5\0\23\7\12\0\1\6\13\0\1\6\1\0"+
    "\3\6\1\0\1\6\1\0\24\6\1\0\54\6\1\0\46\6\1\0"+
    "\5\6\4\0\202\6\1\0\4\7\3\0\105\6\1\0\46\6\2\0"+
    "\2\6\6\0\20\6\41\0\46\6\2\0\1\6\7\0\47\6\11\0"+
    "\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0\2\7\1\0"+
    "\1\7\13\0\33\6\5\0\3\6\15\0\4\7\14\0\6\7\13\0"+
    "\32\6\5\0\13\6\16\7\7\0\12\7\4\0\2\6\1\7\143\6"+
    "\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6"+
    "\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7"+
    "\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0\3\7\66\6\2\0"+
    "\1\7\1\6\20\7\2\0\1\6\4\7\3\0\12\6\2\7\2\0"+
    "\12\7\21\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\11\0\1\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\4\6\15\0\3\7\1\0\6\6\4\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\7\1\0\5\7\4\0\2\7\2\0\3\7\13\0\4\6\1\0"+
    "\1\6\7\0\14\7\3\6\14\0\3\7\1\0\11\6\1\0\3\6"+
    "\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7"+
    "\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6"+
    "\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\6\7\3\0\2\7\2\0\3\7\10\0\2\7\4\0"+
    "\2\6\1\0\3\6\4\0\12\7\1\0\1\6\20\0\1\7\1\6"+
    "\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6"+
    "\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6\1\0\3\6"+
    "\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7\17\0\11\7"+
    "\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\4\0\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\11\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6"+
    "\1\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\20\6\4\0\6\7\2\0\3\7\1\0\4\7"+
    "\11\0\1\7\10\0\2\6\4\0\12\7\22\0\2\7\1\0\22\6"+
    "\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7"+
    "\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6"+
    "\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6"+
    "\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6"+
    "\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6"+
    "\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6"+
    "\1\0\1\6\1\0\6\7\2\0\12\7\2\0\2\6\42\0\1\6"+
    "\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7"+
    "\4\0\2\7\10\6\1\0\42\6\6\0\24\7\1\0\2\7\4\6"+
    "\4\0\10\7\1\0\44\7\11\0\1\7\71\0\42\6\1\0\5\6"+
    "\1\0\2\6\1\0\7\7\3\0\4\7\6\0\12\7\6\0\6\6"+
    "\4\7\106\0\46\6\12\0\51\6\7\0\132\6\5\0\104\6\5\0"+
    "\122\6\6\0\7\6\1\0\77\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\47\6\1\0\1\6\1\0"+
    "\4\6\2\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\7\6\1\0\27\6\1\0"+
    "\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\47\6\1\0"+
    "\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6\2\0\10\6\12\0"+
    "\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7"+
    "\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6"+
    "\1\7\126\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6"+
    "\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0\132\6\6\0\26\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"+
    "\4\0\15\6\5\0\3\6\1\0\7\6\17\0\4\7\32\0\5\7"+
    "\20\0\2\6\23\0\1\6\13\0\4\7\6\0\6\7\1\0\1\6"+
    "\15\0\1\6\40\0\22\6\36\0\15\7\4\0\1\7\3\0\6\7"+
    "\27\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\3\6"+
    "\1\0\7\6\3\0\3\6\5\0\5\6\26\0\44\6\u0e81\0\3\6"+
    "\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0"+
    "\2\7\2\0\3\6\1\0\137\6\5\0\50\6\4\0\136\6\21\0"+
    "\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0"+
    "\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6\14\0\5\6\5\0"+
    "\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0"+
    "\66\6\50\0\15\6\3\0\20\7\20\0\4\7\17\0\2\6\30\0"+
    "\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0"+
    "\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\12\0"+
    "\132\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0"+
    "\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\2\6\1\1"+
    "\14\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\5\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\5\3\0\1\27\1\30\1\31\1\32"+
    "\1\33\2\5\1\34\3\5\1\35\1\36\13\5\1\37"+
    "\1\40\1\41\1\42\1\43\1\5\1\44\1\45\1\46"+
    "\2\5\2\0\3\5\1\47\12\5\1\50\3\5\1\51"+
    "\1\5\1\52\1\53\1\54\1\0\1\2\1\5\1\55"+
    "\6\5\1\56\4\5\1\57\10\5\1\60\1\5\1\61"+
    "\1\62\2\5\1\63\3\5\1\64\1\65\3\5\1\66"+
    "\2\5\1\67\2\5\1\70\1\71\6\5\1\72\2\5"+
    "\1\73\1\74\1\5\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\67\0\245\0\67\0\334\0\67"+
    "\0\u0113\0\u014a\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294"+
    "\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\67\0\u0415"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\67\0\67"+
    "\0\u0596\0\u05cd\0\u0604\0\u014a\0\67\0\334\0\334\0\334"+
    "\0\334\0\u063b\0\u0672\0\334\0\u06a9\0\u06e0\0\u0717\0\u074e"+
    "\0\334\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf"+
    "\0\u0906\0\u093d\0\u0974\0\u09ab\0\67\0\67\0\67\0\67"+
    "\0\67\0\u09e2\0\334\0\334\0\334\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\334\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\334"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\334\0\u0e65\0\334\0\334\0\334"+
    "\0\u0e9c\0\u0a87\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6"+
    "\0\u101d\0\u1054\0\334\0\u108b\0\u10c2\0\u10f9\0\u1130\0\334"+
    "\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8"+
    "\0\334\0\u131f\0\334\0\334\0\u1356\0\u138d\0\334\0\u13c4"+
    "\0\u13fb\0\u1432\0\334\0\334\0\u1469\0\u14a0\0\u14d7\0\334"+
    "\0\u150e\0\u1545\0\334\0\u157c\0\u15b3\0\334\0\334\0\u15ea"+
    "\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\334\0\u1734\0\u176b"+
    "\0\334\0\334\0\u17a2\0\334\0\334";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\7\1\14\1\15\1\7\1\16"+
    "\1\17\1\20\1\21\1\7\1\22\1\23\1\24\1\7"+
    "\1\25\1\7\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\7\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\2\7\1\51"+
    "\5\11\71\0\1\4\70\0\1\52\1\53\67\0\4\7"+
    "\1\0\21\7\11\0\3\7\7\0\10\7\10\0\2\11"+
    "\50\0\5\11\12\54\1\55\54\54\6\0\4\7\1\0"+
    "\1\7\1\56\1\7\1\57\15\7\11\0\3\7\7\0"+
    "\10\7\6\0\4\7\1\0\1\7\1\60\1\7\1\61"+
    "\5\7\1\62\7\7\11\0\3\7\7\0\10\7\6\0"+
    "\4\7\1\0\2\7\1\63\1\7\1\64\14\7\11\0"+
    "\3\7\7\0\1\7\1\65\6\7\6\0\4\7\1\0"+
    "\3\7\1\66\15\7\11\0\3\7\7\0\10\7\6\0"+
    "\4\7\1\0\7\7\1\67\11\7\11\0\3\7\7\0"+
    "\10\7\6\0\4\7\1\0\5\7\1\70\12\7\1\71"+
    "\11\0\3\7\7\0\10\7\6\0\4\7\1\0\7\7"+
    "\1\72\11\7\11\0\3\7\7\0\10\7\6\0\4\7"+
    "\1\0\6\7\1\73\12\7\11\0\3\7\7\0\10\7"+
    "\6\0\4\7\1\0\7\7\1\74\11\7\11\0\1\75"+
    "\2\7\7\0\10\7\6\0\4\7\1\0\11\7\1\76"+
    "\7\7\11\0\3\7\7\0\10\7\6\0\4\7\1\0"+
    "\5\7\1\77\13\7\11\0\3\7\7\0\10\7\6\0"+
    "\4\7\1\0\11\7\1\100\4\7\1\101\2\7\11\0"+
    "\3\7\7\0\10\7\6\0\4\7\1\0\3\7\1\102"+
    "\5\7\1\103\7\7\11\0\3\7\7\0\10\7\6\0"+
    "\4\7\1\0\21\7\11\0\2\7\1\104\7\0\10\7"+
    "\50\0\1\105\66\0\1\106\66\0\1\107\66\0\1\110"+
    "\70\0\1\111\22\0\4\7\1\0\3\7\1\112\15\7"+
    "\11\0\3\7\7\0\3\7\1\113\1\114\1\115\1\116"+
    "\1\117\1\52\1\3\1\4\64\52\5\120\1\121\61\120"+
    "\6\0\4\7\1\0\12\7\1\122\6\7\11\0\3\7"+
    "\7\0\10\7\6\0\4\7\1\0\10\7\1\123\10\7"+
    "\11\0\3\7\7\0\10\7\6\0\4\7\1\0\13\7"+
    "\1\124\5\7\11\0\3\7\7\0\10\7\6\0\4\7"+
    "\1\0\4\7\1\125\14\7\11\0\3\7\7\0\10\7"+
    "\6\0\4\7\1\0\1\126\20\7\11\0\3\7\7\0"+
    "\10\7\6\0\4\7\1\0\1\7\1\127\11\7\1\130"+
    "\5\7\11\0\3\7\7\0\10\7\6\0\4\7\1\0"+
    "\17\7\1\131\1\7\11\0\3\7\7\0\10\7\6\0"+
    "\4\7\1\0\7\7\1\132\11\7\11\0\3\7\7\0"+
    "\10\7\6\0\4\7\1\0\14\7\1\133\4\7\11\0"+
    "\3\7\7\0\10\7\6\0\4\7\1\0\7\7\1\134"+
    "\11\7\11\0\3\7\7\0\10\7\6\0\4\7\1\0"+
    "\5\7\1\135\13\7\11\0\3\7\7\0\1\136\7\7"+
    "\6\0\4\7\1\0\7\7\1\137\11\7\11\0\3\7"+
    "\7\0\10\7\6\0\4\7\1\0\21\7\11\0\1\140"+
    "\2\7\7\0\10\7\6\0\4\7\1\0\5\7\1\141"+
    "\13\7\11\0\3\7\7\0\10\7\6\0\4\7\1\0"+
    "\1\7\1\142\17\7\11\0\3\7\7\0\10\7\6\0"+
    "\4\7\1\0\2\7\1\143\16\7\11\0\3\7\7\0"+
    "\10\7\6\0\4\7\1\0\21\7\11\0\1\144\2\7"+
    "\7\0\10\7\6\0\4\7\1\0\10\7\1\145\10\7"+
    "\11\0\3\7\7\0\10\7\6\0\2\7\1\146\1\7"+
    "\1\0\21\7\11\0\3\7\7\0\7\7\1\147\6\0"+
    "\2\7\1\150\1\7\1\0\21\7\11\0\3\7\7\0"+
    "\10\7\5\120\1\151\65\120\1\152\1\151\61\120\6\0"+
    "\4\7\1\0\3\7\1\153\15\7\11\0\3\7\7\0"+
    "\10\7\6\0\4\7\1\0\3\7\1\154\15\7\11\0"+
    "\3\7\7\0\10\7\6\0\4\7\1\0\2\7\1\155"+
    "\16\7\11\0\3\7\7\0\10\7\6\0\4\7\1\0"+
    "\6\7\1\156\12\7\11\0\3\7\7\0\10\7\6\0"+
    "\4\7\1\0\3\7\1\157\15\7\11\0\3\7\7\0"+
    "\10\7\6\0\4\7\1\0\16\7\1\160\2\7\11\0"+
    "\3\7\7\0\10\7\6\0\4\7\1\0\3\7\1\161"+
    "\15\7\11\0\3\7\7\0\10\7\6\0\4\7\1\0"+
    "\2\7\1\162\16\7\11\0\3\7\7\0\10\7\6\0"+
    "\4\7\1\0\15\7\1\163\3\7\11\0\3\7\7\0"+
    "\10\7\6\0\4\7\1\0\5\7\1\164\13\7\11\0"+
    "\3\7\7\0\10\7\6\0\4\7\1\0\10\7\1\165"+
    "\10\7\11\0\3\7\7\0\10\7\6\0\4\7\1\0"+
    "\13\7\1\166\5\7\11\0\3\7\7\0\10\7\6\0"+
    "\4\7\1\0\11\7\1\167\7\7\11\0\3\7\7\0"+
    "\10\7\6\0\4\7\1\0\14\7\1\170\4\7\11\0"+
    "\3\7\7\0\10\7\6\0\4\7\1\0\16\7\1\171"+
    "\2\7\11\0\3\7\7\0\10\7\6\0\4\7\1\0"+
    "\2\7\1\172\16\7\11\0\3\7\7\0\10\7\6\0"+
    "\4\7\1\0\13\7\1\173\5\7\11\0\3\7\7\0"+
    "\10\7\4\120\1\4\1\151\61\120\6\0\4\7\1\0"+
    "\10\7\1\174\10\7\11\0\3\7\7\0\10\7\6\0"+
    "\4\7\1\0\7\7\1\175\11\7\11\0\3\7\7\0"+
    "\10\7\6\0\4\7\1\0\11\7\1\176\7\7\11\0"+
    "\3\7\7\0\10\7\6\0\4\7\1\0\3\7\1\177"+
    "\15\7\11\0\3\7\7\0\10\7\6\0\4\7\1\0"+
    "\21\7\11\0\1\200\2\7\7\0\10\7\6\0\4\7"+
    "\1\0\1\7\1\201\17\7\11\0\3\7\7\0\10\7"+
    "\6\0\4\7\1\0\11\7\1\202\7\7\11\0\3\7"+
    "\7\0\10\7\6\0\4\7\1\0\3\7\1\203\15\7"+
    "\11\0\3\7\7\0\10\7\6\0\4\7\1\0\1\7"+
    "\1\204\17\7\11\0\3\7\7\0\10\7\6\0\4\7"+
    "\1\0\1\7\1\205\17\7\11\0\3\7\7\0\10\7"+
    "\6\0\4\7\1\0\2\7\1\206\16\7\11\0\3\7"+
    "\7\0\10\7\6\0\4\7\1\0\5\7\1\207\13\7"+
    "\11\0\3\7\7\0\10\7\6\0\4\7\1\0\21\7"+
    "\11\0\1\210\2\7\7\0\10\7\6\0\4\7\1\0"+
    "\21\7\11\0\2\7\1\211\7\0\10\7\6\0\4\7"+
    "\1\0\2\7\1\212\16\7\11\0\3\7\7\0\10\7"+
    "\6\0\4\7\1\0\1\7\1\213\17\7\11\0\3\7"+
    "\7\0\10\7\6\0\4\7\1\0\20\7\1\214\11\0"+
    "\3\7\7\0\10\7\6\0\4\7\1\0\21\7\11\0"+
    "\3\7\7\0\2\7\1\215\5\7\6\0\4\7\1\0"+
    "\10\7\1\216\10\7\11\0\3\7\7\0\10\7\6\0"+
    "\4\7\1\0\10\7\1\217\10\7\11\0\3\7\7\0"+
    "\10\7\6\0\4\7\1\0\20\7\1\220\11\0\3\7"+
    "\7\0\10\7\6\0\4\7\1\0\21\7\11\0\1\7"+
    "\1\221\1\7\7\0\10\7\6\0\4\7\1\0\3\7"+
    "\1\222\15\7\11\0\3\7\7\0\10\7\6\0\4\7"+
    "\1\0\5\7\1\223\13\7\11\0\3\7\7\0\10\7"+
    "\6\0\4\7\1\0\1\224\20\7\11\0\3\7\7\0"+
    "\10\7\6\0\4\7\1\0\11\7\1\225\7\7\11\0"+
    "\3\7\7\0\10\7\6\0\4\7\1\0\3\7\1\226"+
    "\15\7\11\0\3\7\7\0\10\7\6\0\4\7\1\0"+
    "\1\7\1\227\17\7\11\0\3\7\7\0\10\7\6\0"+
    "\4\7\1\0\3\7\1\230\15\7\11\0\3\7\7\0"+
    "\10\7\6\0\4\7\1\0\21\7\11\0\2\7\1\231"+
    "\7\0\10\7\6\0\4\7\1\0\21\7\11\0\3\7"+
    "\7\0\1\232\7\7\6\0\4\7\1\0\21\7\11\0"+
    "\2\7\1\233\7\0\10\7\6\0\4\7\1\0\21\7"+
    "\11\0\3\7\7\0\2\7\1\234\5\7\6\0\4\7"+
    "\1\0\14\7\1\235\4\7\11\0\3\7\7\0\10\7"+
    "\6\0\4\7\1\0\21\7\11\0\1\236\2\7\7\0"+
    "\10\7\6\0\4\7\1\0\3\7\1\237\15\7\11\0"+
    "\3\7\7\0\10\7\6\0\4\7\1\0\7\7\1\240"+
    "\11\7\11\0\3\7\7\0\10\7\6\0\4\7\1\0"+
    "\3\7\1\241\15\7\11\0\3\7\7\0\10\7\6\0"+
    "\4\7\1\0\1\7\1\242\17\7\11\0\3\7\7\0"+
    "\10\7\6\0\4\7\1\0\5\7\1\243\13\7\11\0"+
    "\3\7\7\0\10\7\6\0\4\7\1\0\5\7\1\244"+
    "\13\7\11\0\3\7\7\0\10\7\6\0\4\7\1\0"+
    "\1\7\1\245\17\7\11\0\3\7\7\0\10\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6105];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\16\1\11\11\7\1\2\11\1\1\3\0\1\11\27\1"+
    "\5\11\6\1\2\0\27\1\1\0\74\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BonesScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  BonesScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { return new Symbol(BonesParser.Terminals.EQ, yytext());
          }
        case 63: break;
        case 3: 
          { return new Symbol(BonesParser.Terminals.DIV, yytext());
          }
        case 64: break;
        case 55: 
          { return new Symbol(BonesParser.Terminals.RETURN, yytext());
          }
        case 65: break;
        case 46: 
          { return new Symbol(BonesParser.Terminals.F_PICK, yytext());
          }
        case 66: break;
        case 28: 
          { return new Symbol(BonesParser.Terminals.F_EQ, yytext());
          }
        case 67: break;
        case 9: 
          { return new Symbol(BonesParser.Terminals.LCUR, yytext());
          }
        case 68: break;
        case 33: 
          { return new Symbol(BonesParser.Terminals.EQGT, yytext());
          }
        case 69: break;
        case 15: 
          { return new Symbol(BonesParser.Terminals.COLO, yytext());
          }
        case 70: break;
        case 60: 
          { return new Symbol(BonesParser.Terminals.INTERSECT, yytext());
          }
        case 71: break;
        case 25: 
          { return new Symbol(BonesParser.Terminals.F_GE, yytext());
          }
        case 72: break;
        case 21: 
          { return new Symbol(BonesParser.Terminals.PLUS, yytext());
          }
        case 73: break;
        case 12: 
          { return new Symbol(BonesParser.Terminals.RBRA, yytext());
          }
        case 74: break;
        case 49: 
          { return new Symbol(BonesParser.Terminals.WHILE, yytext());
          }
        case 75: break;
        case 56: 
          { return new Symbol(BonesParser.Terminals.EXPLODE, yytext());
          }
        case 76: break;
        case 8: 
          { return new Symbol(BonesParser.Terminals.RPAR, yytext());
          }
        case 77: break;
        case 39: 
          { return new Symbol(BonesParser.Terminals.F_NEQ, yytext());
          }
        case 78: break;
        case 61: 
          { return new Symbol(BonesParser.Terminals.ROLLAGAIN, yytext());
          }
        case 79: break;
        case 50: 
          { return new Symbol(BonesParser.Terminals.PRINT, yytext());
          }
        case 80: break;
        case 23: 
          { return new Symbol(BonesParser.Terminals.STRING, yytext());
          }
        case 81: break;
        case 19: 
          { return new Symbol(BonesParser.Terminals.LT, yytext());
          }
        case 82: break;
        case 30: 
          { return new Symbol(BonesParser.Terminals.IF, yytext());
          }
        case 83: break;
        case 43: 
          { return new Symbol(BonesParser.Terminals.D12, yytext());
          }
        case 84: break;
        case 45: 
          { return new Symbol(BonesParser.Terminals.ELSE, yytext());
          }
        case 85: break;
        case 26: 
          { return new Symbol(BonesParser.Terminals.F_LT, yytext());
          }
        case 86: break;
        case 22: 
          { return new Symbol(BonesParser.Terminals.MOD, yytext());
          }
        case 87: break;
        case 6: 
          { return new Symbol(BonesParser.Terminals.INTLIT, yytext());
          }
        case 88: break;
        case 11: 
          { return new Symbol(BonesParser.Terminals.LBRA, yytext());
          }
        case 89: break;
        case 37: 
          { return new Symbol(BonesParser.Terminals.D6, yytext());
          }
        case 90: break;
        case 41: 
          { return new Symbol(BonesParser.Terminals.VAR, yytext());
          }
        case 91: break;
        case 62: 
          { return new Symbol(BonesParser.Terminals.COMPLEMENT, yytext());
          }
        case 92: break;
        case 17: 
          { return new Symbol(BonesParser.Terminals.BANG, yytext());
          }
        case 93: break;
        case 52: 
          { return new Symbol(BonesParser.Terminals.F_LOWEST, yytext());
          }
        case 94: break;
        case 7: 
          { return new Symbol(BonesParser.Terminals.LPAR, yytext());
          }
        case 95: break;
        case 13: 
          { return new Symbol(BonesParser.Terminals.COMMA, yytext());
          }
        case 96: break;
        case 58: 
          { return new Symbol(BonesParser.Terminals.CONSTVAR, yytext());
          }
        case 97: break;
        case 35: 
          { return new Symbol(BonesParser.Terminals.TO, yytext());
          }
        case 98: break;
        case 18: 
          { return new Symbol(BonesParser.Terminals.GT, yytext());
          }
        case 99: break;
        case 59: 
          { return new Symbol(BonesParser.Terminals.DESPLODE, yytext());
          }
        case 100: break;
        case 44: 
          { return new Symbol(BonesParser.Terminals.D20, yytext());
          }
        case 101: break;
        case 24: 
          { return new Symbol(BonesParser.Terminals.F_GT, yytext());
          }
        case 102: break;
        case 20: 
          { return new Symbol(BonesParser.Terminals.MINUS, yytext());
          }
        case 103: break;
        case 32: 
          { return new Symbol(BonesParser.Terminals.NEQ, yytext());
          }
        case 104: break;
        case 47: 
          { return new Symbol(BonesParser.Terminals.FUNC, yytext());
          }
        case 105: break;
        case 34: 
          { return new Symbol(BonesParser.Terminals.EQLT, yytext());
          }
        case 106: break;
        case 48: 
          { return new Symbol(BonesParser.Terminals.F_INPUT, yytext());
          }
        case 107: break;
        case 27: 
          { return new Symbol(BonesParser.Terminals.F_LE, yytext());
          }
        case 108: break;
        case 38: 
          { return new Symbol(BonesParser.Terminals.D8, yytext());
          }
        case 109: break;
        case 40: 
          { return new Symbol(BonesParser.Terminals.FOR, yytext());
          }
        case 110: break;
        case 29: 
          { return new Symbol(BonesParser.Terminals.IN, yytext());
          }
        case 111: break;
        case 51: 
          { return new Symbol(BonesParser.Terminals.UNION, yytext());
          }
        case 112: break;
        case 5: 
          { return new Symbol(BonesParser.Terminals.ID, yytext());
          }
        case 113: break;
        case 10: 
          { return new Symbol(BonesParser.Terminals.RCUR, yytext());
          }
        case 114: break;
        case 57: 
          { return new Symbol(BonesParser.Terminals.F_HIGHEST, yytext());
          }
        case 115: break;
        case 16: 
          { return new Symbol(BonesParser.Terminals.ASN, yytext());
          }
        case 116: break;
        case 4: 
          { return new Symbol(BonesParser.Terminals.MULT, yytext());
          }
        case 117: break;
        case 42: 
          { return new Symbol(BonesParser.Terminals.D10, yytext());
          }
        case 118: break;
        case 14: 
          { return new Symbol(BonesParser.Terminals.SEMI, yytext());
          }
        case 119: break;
        case 54: 
          { return new Symbol(BonesParser.Terminals.F_SIZEOF, yytext());
          }
        case 120: break;
        case 53: 
          { return new Symbol(BonesParser.Terminals.ELSEIF, yytext());
          }
        case 121: break;
        case 1: 
          { throw new Scanner.Exception("invalid token found"+yytext());
          }
        case 122: break;
        case 36: 
          { return new Symbol(BonesParser.Terminals.D4, yytext());
          }
        case 123: break;
        case 2: 
          { 
          }
        case 124: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return new Symbol(BonesParser.Terminals.EOF, "end-of-file");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
